Updates in CLI Flasher v2.0.0-dev16
==============================

* Switch to Lua 5.4
* Overhaul of build system: dependencies are now integrated as submodules 
  and are built together with the flasher.
* The netx_reset command of the cli_flasher now works also in secure boot mode.
  (the reset is now triggered by code running on the netX, a subcommand
  of the CLI flasher.)
* Use the value of --sec as default value for --sec_p2 instead of the 
  unsigned directory.


Updates in CLI Flasher v2.0.0-dev15
==============================

* Bugfixes in module loading (wfp.lua and demo scripts)
* Include the command line in the output
* Do not attempt to print binary file when showing the plugin options.
* Update romloader to v2.5.4-dev11
  Bugfix in disable interrupts routine used when connecting to netx 90.

Updates in CLI Flasher v2.0.0-dev14
==============================

* Fix get_uid command via JTAG interface and a running SW
* Bugfix in usip_player 
* Bugfix in signature verification
* New version of helper binaries (read_sip, verify_sig) with baudrate fix

* Misc. changes to build system, CI builds on github
* Fix luacheck warnings in lua scripts


Updates in CLI Flasher v2.0.0-dev13
==============================

CLI Flasher:
* The flash device size is printed as an unsigned number.

USIP Player:
* No longer store temporary files inside flasher
* Read command now takes the output folder as a positional argument (was '-o' '--output')

CLI Flasher, WFP:
* If the device size is 0xffffffff bytes or more (4 gigabytes), the device is rejected.
* Added automatic signature checking for helper binaries.

  The flasher will automatically check the signatures of the helpers used 
  for the current command, if
  - a helper directory is supplied using the --sec option,
    wich is not the 'unsigned' directory
  - checking is not disabled by adding the flag --disable_helper_signature_check

  For the CLI flasher:
  The check is performed for the following commands:
  flash, read, erase, verify, verify_hash, hash 
  detect, info, identify_netx, test, testcli

  It is not currently performed for these commands:
  reset_netx, detect_secure_boot_mode, detect_netx


CLI Flasher, WFP, USIP Player:
* Stabilize UART communication by retrying connect command
* Cleaned up the command line interface:
  remove redundant used abbreviations inside API ('reset_netx' and 'read' both used abbreviation 'r')
  The version can be queried using -v/--version 
  The abbreviation for --verbose is not -V 
  Some commands were renamed:
  check_helper_files -> check_helper_version chv
  verify_helper_signatures -> check_helper_signature chs

Update romloader to v2.5.4-dev9:
* If the UART knock (identify_loader) fails on the first attempt,
  retry before going on to fix_deadloop.

Updates in CLI Flasher v2.0.0-dev12
==============================

Disable the pull-down resistors of the UART RXD/TXD pins.

* when the flasher binary or boot image is executed 
* when read_sip, verify_signature or set_kek is executed 
* when start_mi is executed
* when detect_netx is executed and the chip type is netx 90 rev.1


Updates in CLI Flasher v2.0.0-dev11
==============================
CLI Flasher:
* Bugfix: reset_netx command did not work
* detect_secure_boot_mode command works via JTAG

USIP Player:
* New command detect_sip_protection_cookie
* New command disable_security.
  This command applies an USIP file that 
  - disables secure boot on the COM and APP CPU,
  - enables the copying and disables the hiding of the COM and APP info pages 
  - disables the security level on the COM and APP info pages
* New flag --disable_helper_signature_check
* Avoid unneccessary splitting of USIP images (SIPper)
* Bugfix: some input files were not closed in SIPper
* Bugfix: Possible error when skipping non-usip chunks. (USIP Generator)
* Bugfix: set_kek command
* Bugfix: set_sip_protection command 

Common (CLI Flasher, WFP, USIP Player):
* Add the command verify_helper_signatures.
  This command takes a directory containing signed helper binaries 
  and validates the signatures against the keys stored in the netx.
* Rename the command line flag --disable_helper_file_check to 
  --disable_helper_version_check and hide it from the command line documentation.
* Remove the short form '-d'.

Update romloader to v2.5.4-dev7:
* Updated the error message that is shown if, while connecting to the 
  netx 90 via JTAG, the chip type cannot be detected:
  Error: Could not detect the chip type.
  The debug access port might be disabled.



Updates in CLI Flasher v2.0.0-dev10
==============================
CLI Flasher:
* fix path setting of flasher hboot image
* increase


Updates in CLI Flasher v2.0.0-dev9
==============================
CLI Flasher:
* Print input arguments at start of every command.

USIP Player:
* Use helper file version check in USIP Player
* re-added set_kek.usp image with distribution
* update read_sip_M2M.bin from version v1.0.0-dev3 to v1.0.0-dev4

WFP:
* Use helper file version check in USIP Player

Updates in CLI Flasher v2.0.0-dev8
==============================
CLI Flasher:
* Added version check for helper files that may be changed by the user.
  This applies to the boot images that may be signed by the user.
  
  Generally, before any of these helper files are used, their version is checked.
  This check may be suppressed by adding the command line flag 
  --disable_helper_file_check
  or by settin the environment variable 
  CLI_FL_DISABLE_HELPER_FILE_CHECK
  to any value.
  
  The new command 
  check_helper_files
  checks all helper files explicitly.

  Note: 
  The check_helper_files command is implemented,
  the option to disable the checks is implemented,
  the checks when helper files are loaded are only partially implemented.

* Updated the helper files

USIP Player:
* add argument '--sec_phase2', '--sec_p2' (used to be argument '--reset').
  * argument used to select helper images for phase 2 of USIP command.
  * phase 2 is the reset after the last USIP booted and also the verification of the loaded USIP content.
  
* add argument '--no_reset'.
  * argument is used to completely skip phase 2 of USIP command.
  
* '--no_verify' now only skips the verification of the USIP content inside the SIP (the reset will still be done).



Updates in CLI Flasher v2.0.0-dev7
==============================

Update romloader to v2.5.4-dev6:
* Add support for the SEGGER J-Link adapter with VID 0x1366/PID 0x1020.
  
USIP Player:
* Integrate first version of USIP Player that replaces the python executables of Sipper and USIP Generator by lua implementations.
* USIP Player does not depend on the UART protocol, now working with previously opened UART text and M2M console protocol.  


Updates in CLI Flasher v2.0.0-dev6
==============================
CLI Flasher:
* Bugfix: testcli command was failing

WFP:
* Bugfix: plugin options not working in commands read and example

Update Romloader to v2.5.4-dev5:
* Bugfix: Fix a bug causing memory corruption when exiting the application
  when romloader_uart was loaded (since 2.5.4-dev1).
  
* Add a version of start_mi image that does not clear the working area.


Updates in CLI Flasher v2.0.0-dev5
==============================

CLI Flasher:
* Bugfix: test and testcli commands
* Bugfix: added command line arguments --comp and --sec to the commands 
  verify_hash, hash and identify_netx
  
WFP: 
* Bugfix: pack command did not work

Update Romloader to v2.5.4-dev4:
* Bugfix: Allow connecting to netx 90 Rev.2 in secure boot mode via ethernet 
  if the ethernet machine interface is active.


Updates in CLI Flasher v2.0.0-dev4
==============================

netX 90 Rev.1/Rev.2:
* Added the command detect_secure_boot_mode. 
  This command tests the behaviour of the console and derives the secure boot settings.
  The result is passed via the exit code:
  SECURE_BOOT_DISABLED = 0: COM and APP CPUs are open
  SECURE_BOOT_ENABLED = 5: COM CPU is secure, APP CPU unknown
  SECURE_BOOT_ONLY_APP_ENABLED = 50: APP CPU is secure, COM CPU is not
  SECURE_BOOT_UNKNOWN = 2: If the netX has just been reset into console mode 
                           (SYS LED blinking), COM and APP CPU are in open 
                           mode. Otherwise, the mode is unknown.
  SECURE_BOOT_ERROR = 1: The secure boot mode could not be detected.
  
  This command works only with netX 90 Rev.1/2 and romloader_uart. 
  

Updates in CLI Flasher v2.0.0-dev3
==============================

netX 90 Rev.1/Rev.2:
* the flasher can now connect to a netX 90 Rev.1 or Rev.2 in the UART terminal console
  or secure boot mode by running a HBoot image that starts the machine interface (start_mi).
  If the netX is in secure boot mode, this boot image needs to be signed with the firmware key.
  
* detect_netx now works when the netx is in the UART terminal console or in secure boot mode.
  If the boot image to start the machine interface has been downloaded, but failed to execute,
  because it is not signed or not correctly signed, the following error is returned: 
  "start_mi image has been rejected or execution has failed." 
  and the script exits with exit code 2.
  (All other commands exit with exit code 1 when an error occurs.)

  If a netx 90 Rev.1 was detected during Connect(), but no connection has been made (the machine 
  interface could not be started), the exact chip type could not be determined. 
  In this case, the "suspicious" chip type is printed:
  netX90 Rev1 (suspicious, PHY version not checked)



Updates in CLI Flasher v2.0.0-dev2
==============================

* CLI flasher, WFP on netX 90 Rev.1/2: 
  Now working in secure boot mode
  Now working when the netX has previously entered the UART terminal console.

* CLI flasher: Updated the command line syntax

* CLI flasher, WFP:
  Use the new secure flasher functions on the command line
  Add two new optional_args '--comp' and '--sec':
    - '--comp': use compatibility mode for netx90 M2M interfaces
        - per default the hboot mode is used for netx90 m2m communication
        - when this flag is set, the binary mode is used.
    - '--sec': path to secure images used for secure M2M connection
        - path to a folder where all signed versions of the images from 'netx/hboot/unsigned' are stored

* Implemented the 'hash' and 'verify_hash' commands on the netX 90.

* Added the 'identify_netx' command.
  It allows the visual identification of hardware by flashing
  the system LED in a Yellow Yellow Green Green pattern for 5 seconds

* Updated libusb version to 1.0.26
  (todo: explain)

USIP Player:
* Add the parameter -t (plugin type)

* Remove the option '--extend_exec' and set its functionality as the default for jtag interfaces 

* Merge parameter '--sec' and '--sec_sp' to one parameter (NXTFLASHER-377)


Updates in CLI Flasher v1.8.1
==============================

* Bugfix: detect_netx may hang with netx 90 Rev1 (PHY V2 or V3) 
  over ethernet.

Romloader v2.5.3:
* Bugfix: Possible crash when connecting to the netX 90 Rev2
  via UART or ethernet.

USIPGen v0.2.1: 
* Exit with error code 1 if the serial connection can not be opened
  inside the load_usip function.

USIP Player:
* Do not verify the signature of the helper files if the read command 
  is selected.



Updates in CLI Flasher v1.8.0
==============================

* Add Support for new chip types:
  netX 90 Rev1 with PHY v3 (Step C)
  netX 90 Rev2 (Step D)

* When detecting an SPI/SQI flash, detect and display the 
  device name and its JEDEC ID, when possible.

* 'detect_netx' command: when netX 90 Rev. 1 is found,
  detect the PHY version.


Romloader v2.5.2:
* netX 90/JTAG: disable all IRQs if CPU is halted in undefined state 
  (that is, when attach mode is selected or when the CPU does not halt 
  in the breakpoint as expected after reset.)

* netx 90 Rev1 and Rev2: When the netx is in the UART terminal console,
  send a reset command which allows us to enter the machine interface.
  (Previously, a manual reset was required).

* UART machine interface:
  During the connection setup, when the netx is repeatedly sending a packet
  because it is waiting for an ack packet, send a cancel_operation request.

* netX 90: When secure boot mode is detected, exit with an error.

* Changed wording of some messages during chip type detection
  more uniform messages
  mention when chip type is potentially incorrect
  mention open/secure boot mode


WFP:
* Added the 'read' command.
  It allows to read data from the flash controlled by a WFP control file 
  and store the resulting files in a WFP directory or a WFP archive.

* Added the 'example' command.
  It detects the chip type of a connected netx chip and creates an example
  control XML file for this chip type.

* Added summary output to the verify command.

* Bugfix: Verify command fails for a wfp archive that uses a flash command 
  for intflash01 before another flash command for intflash1 or intflash0.
  (NXTFLASHER-432)

* Bugfix: Add timestamps to the files in a created archive. (NXTFLASHER-426)


USIP Player:
* Added command 'set_kek'

* Updated the read_sip binary
  Invalidate the SIP copy in RAM and reset to prevent reading from an outdated copy.


SIPper v0.2.3:
* Changed uart_handler to version 1.2.1
  Added support of new uart_handler receive routine to make the communication more robust

* Added details to executable, which are shown when you hover over the exe file in Windows



Updates in CLI Flasher v1.7.0
==============================

* USIP Player improvements:
  When the command line option '--force_console' is present, 
  scan only for UART interfaces as the interface must be UART.
  When the command line option '--extend_exec' is present, 
  scan only for JTAG interfaces as the interface must be JTAG.

  Speed up scanning for interfaces by not scanning on ethernet.

* Update SIPper to v0.2.1
  Bugfix in analyze command.




Updates in CLI Flasher v1.6.3
==============================

* CLI Flasher bugfix (NXTFLASHER-360):
  netx 90 internal flash:
  After accessing the bank 1 info page (-b 2 -u 1 -cs 1 or 2),	
  a subsequent access to bank 3 (-b 2 -u 3) 
  may return incorrect results or crash.
  This does not occur when a reset was performed after accessing 
  the info page.
	
* USIP player:
  This is an extension that allows access to the secure info pages and 
  execution of USIP images on the netX 90.

  usip                  Load an usip file on the netX, reset the netX and 
                        process the usip file to update the SecureInfoPage.
  verify                Verify the content of a usip file against the 
                        content of a secure info page.
  read                  Read out the content of the secure infopage and 
                        save it into a temporary folder.
  set_sip_protection    Set the SipProtectionCookie, enable protection of SIPs.
  detect_secure_mode    Detect the secure mode of the netX. 
  get_uid               Get the unique ID.

  Example:
  lua5.1 usip_player.lua -h

* Moved to OpenOCD 0.11.0/libUSB 1.0.24
  Change in output formatting:
  Trace messages passed up from the flasher running on the netX that previously
  ended with a double line break, now end with a single line break.
  Some trace messages from OpenOCD itself, e.g. register writes, that previously
  ended with a single line break, now end with a double line break.
  
* JTAG: Add support for the netSHIELD 90 board 

* Initialize the netIOL PLL

* Improved stability of machine interface protocol 

* JTAG: Disable breakpoints after running the flasher on netX  

* JTAG: Update attach/reset procedure for netx 90:
  Remove early breakpoint at 0x170
  This breakpoint can be enabled manually in jtag_detect_init.tcl
  Abort with an error if the CPU cannot be halted.

* reset_netx 
  This new command allows to reset the netX.
  It works by triggering a watchdog reset.
  This means that it does not require a hardware reset line, but does require
  that the netX is accessible via a machine interface connection or via JTAG.
  Limitation: When using JTAG, this command only supports the netX 90.
  Example:
  lua5.1 cli_flash.lua reset_netx 
  
* JTAG reset mode
  This option allows selecting if/how the netX is reset when connecting
  via JTAG:
  hard: reset the netX using the SRST line of the JTAG adapter (default)
  soft: reset the netX using the DPM reset request
  attach: do not reset the netX
  Example:
  lua5.1 cli_flash.lua flash -jtag_reset hard -b 1 data.bin
  
* JTAG frequency 
  This option allows selecting the frequency used for the JTAG interface.
  Example:
  lua5.1 cli_flash.lua flash -jtag_khz 6000 -b 1 data.bin

* WFP: WFP files may contain multiple files with the same name
  under different paths.
  The file attribute of a Data node may now contain a filename with a path, if 
  the FlasherPackage node includes the attribute has_subdirs="True".

  When using 'has_subdirs' flag:
   - the whole file path inside the wfp-control file is used as reference to 
     check for multiple copies of the same file
   - the archive will be packed with a hierarchy
  When not using 'has_subdirs' flag:
   - only the file name will be used as a reference for checking for multiple 
     files with the same name
   - multiple files with the same name in different subdirs will lead to an 
     Error while packing
   - the archive will be packed with a flat hierarchy

* WFP verify bugfix: handle netx 90 intflash01 (-b 2 -u 3) correctly.

Other changes:

* Replace the netX4000 RELAXED with the netX4000 FULL

* Build the GPIO drivers on ARM platforms.



	
Updates in CLI flasher v1.6.2
==============================

* Specify interface type to speed up scanning for interfaces
  Both cli_flash.lua and wfp.lua now support the command line argument 
  -t <plugin type> to specify the interface type.
  This can speed up the scanning process.
  
  Example:
  lua5.1 cli_flash.lua list_interfaces -t romloader_uart

  The following interface types exist:
  romloader_uart 
  romloader_usb 
  romloader_jtag
  romloader_eth

  -t may be combined with -p (specifying the interface name).

* If an isErased check fails, the device offset of the first 
  non-erased location is printed.

* Bugfix: Verify error offset 
  The verify function for serial flash reported an incorrect offset when a difference was found. (cli_flash.lua)


Changes specific to JTAG:

* Add support for the Segger J-Link JTAG adapter.
  Support has been added for the following variants:
  VID 0x1366 PID 0x0101 
  VID 0x1366 PID 0x0105 
  
* Add support for the NXEB 90-SPE board.

* Change the interface name of the NXHX90-DRIVE board to NXHX90-MC.

* Removed delays in JTAG memory access functions. Poll faster for messages.

* Bugfix: Spike on nSRST line
  Fix a spike on the reset line that occurred on the nSRST line on FTDI-based
  JTAG adapters when a reset was triggered.
  
  This change affects the following boards:
  NXHX 90-JTAG
  NXHX 90-MC
  NXHX 90-SPE
  NRPEB H90-RE
  and the following adapters:
  NXJTAG-USB 
  NXJTAG-4000-USB



Changes specific to WFP:

* Add the verify command to check if a WFP was written to flash correctly.

* Add "conditions" to the flash and verify commands
  Conditions are variables that are set via the command line as key=value pairs. 
  The instructions in the wfp.xml control file can be made dependent on the 
  values of these variables.
  For instance, this allows to use a single WFP file to flash different 
  hardware configurations or firmware variants.

* Add the 'erase' command to the wfp.xml control file.

* Add simple WFPs
  Add the flag -s/--simple to the pack command. 
  This will create a SWFP file without compression.

* Add version command 
  Using the command -v or --version

* It is now possible to use subdirectories in wfp.xml

* Bugfix: wfp.lua returns return code 1 in case of errors.



